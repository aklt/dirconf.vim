==============================================================================
*dirconf.txt*            Project configuration and notes                v0.3.0
==============================================================================
                                                                     *dirconf*

This plugin is for having different configurations for different projects.  If
you access different repositories that require different options and
configurations for vim, this plugin may be for you!

Usage ~

When editing a file in a project call: >

    :DirConf
<
to open the context file.  This file should contain vim configuration which
will be executed right before you begin editing a file in this project.

If the first argument to DirConf is a file suffix, a file of this type is
opened, for example >

    :DirConf md
<
will open a context file with a `.md` extension instead of `.vim`. This is
useful for opening corresponding documentation about the project.

I have mapped `:DC` and `:DD` to edit either the project configuration or
documentation: >

    nnoremap :DC :DirConf<CR>
    nnoremap :DD :DirConf md<CR>
<
                                                             *dirconf-context*
The context file ~

The context file can contain arbitrary vim configuration.  It will be
evaluated as a vim function when a file in the corresponding project is
opened.  Within it there is access to these predefined variables:

  *a:dir*    the directory where dirconf context files are stored
  *a:name*   the context file basename
  *a:file*   the context file name with `.vim` suffix

if the context file sets `reload_eagerly` to 1: >

    let reload_eagerly = 1
<
the function created from the context file will be evaluated each time the
buffer is entered.  This is useful to set global configuration variables for a
project that are different for another file in a different buffer.

                                                              *dirconf-config*
Configuration ~

The project root directory is determined by searching backwards from the file
path until one of the files in `g:dirconf_parent_files` is found.  It defaults
to: >

    let g:dirconf_parent_files = ['.git/config', '.root']
<
When one of these files is found in a directory it becomes the root directory
and all files beneath it will share the same dirconf context file.

                                                               *g:dirconf_dir*

All files edited through `:DirConf` are stored under `g:dirconf_dir` which
defaults to: >

    let g:dirconf_dir = $HOME . '/.vim/dirconf'
<
If the directory does not exist it is created.
                                                           *g:dirconf_verbose*

To see debug info you can set >

    let g:dirconf_verbose = 1
<
TODO                                                            *dirconf-todo*

* work on windows

==============================================================================
vim:tw=78:ts=8:ft=help:fdm=marker
